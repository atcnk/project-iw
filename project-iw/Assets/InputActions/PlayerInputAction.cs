//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.5.1
//     from Assets/InputActions/PlayerInputAction.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

namespace CodeNameIW.InputSystem
{
    public partial class @PlayerInputAction: IInputActionCollection2, IDisposable
    {
        public InputActionAsset asset { get; }
        public @PlayerInputAction()
        {
            asset = InputActionAsset.FromJson(@"{
    ""name"": ""PlayerInputAction"",
    ""maps"": [
        {
            ""name"": ""PlayerControlActionMap"",
            ""id"": ""4987a120-488d-44a1-82bf-f2ec8ab7626f"",
            ""actions"": [
                {
                    ""name"": ""GamepadMovementAction"",
                    ""type"": ""Value"",
                    ""id"": ""e727fc3b-2f7b-4499-83b4-b2d033b39d68"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""KeyboardMovementAction"",
                    ""type"": ""Value"",
                    ""id"": ""449e46d4-d46e-448e-a7f6-3ce748570d5f"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""RunningAction"",
                    ""type"": ""Button"",
                    ""id"": ""effbec68-375b-4e96-b43b-983e6c724434"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""MouseRotationAction"",
                    ""type"": ""PassThrough"",
                    ""id"": ""0b09c020-ca79-4587-98ae-bf4192e823cd"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""GamepadRotationAction"",
                    ""type"": ""PassThrough"",
                    ""id"": ""18259ce5-315b-46eb-9158-349ddab8878e"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""7dc843bd-0de2-4258-9ac1-0bdf6f8b21fb"",
                    ""path"": ""<Keyboard>/leftShift"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""RunningAction"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""131db48a-065f-478b-993e-a49f5aeb15f9"",
                    ""path"": ""<Gamepad>/rightShoulder"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""RunningAction"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""05620cb8-6a0c-4252-b13a-cc4769923822"",
                    ""path"": ""<Mouse>/position"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MouseRotationAction"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""df74fcfc-6f28-44c0-85b9-cf3f4956da5a"",
                    ""path"": ""<Gamepad>/leftStick"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""GamepadMovementAction"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""WASD"",
                    ""id"": ""c57b8f7b-b2b0-44ac-b8c3-16b37e856067"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""KeyboardMovementAction"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""3aa3bcdc-12b3-4fed-900e-e65d56a7230e"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""KeyboardMovementAction"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""a674e1e2-4d59-4f70-b0de-c53056cb1afb"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""KeyboardMovementAction"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""f6fd3030-f13f-45aa-9c79-5a9390c1acad"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""KeyboardMovementAction"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""810f4208-acbd-4e97-91bd-5a7a46fe53b2"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""KeyboardMovementAction"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""96165db6-6b60-47fb-b74c-e538019df5ac"",
                    ""path"": ""<Gamepad>/rightStick"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""GamepadRotationAction"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
            // PlayerControlActionMap
            m_PlayerControlActionMap = asset.FindActionMap("PlayerControlActionMap", throwIfNotFound: true);
            m_PlayerControlActionMap_GamepadMovementAction = m_PlayerControlActionMap.FindAction("GamepadMovementAction", throwIfNotFound: true);
            m_PlayerControlActionMap_KeyboardMovementAction = m_PlayerControlActionMap.FindAction("KeyboardMovementAction", throwIfNotFound: true);
            m_PlayerControlActionMap_RunningAction = m_PlayerControlActionMap.FindAction("RunningAction", throwIfNotFound: true);
            m_PlayerControlActionMap_MouseRotationAction = m_PlayerControlActionMap.FindAction("MouseRotationAction", throwIfNotFound: true);
            m_PlayerControlActionMap_GamepadRotationAction = m_PlayerControlActionMap.FindAction("GamepadRotationAction", throwIfNotFound: true);
        }

        public void Dispose()
        {
            UnityEngine.Object.Destroy(asset);
        }

        public InputBinding? bindingMask
        {
            get => asset.bindingMask;
            set => asset.bindingMask = value;
        }

        public ReadOnlyArray<InputDevice>? devices
        {
            get => asset.devices;
            set => asset.devices = value;
        }

        public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

        public bool Contains(InputAction action)
        {
            return asset.Contains(action);
        }

        public IEnumerator<InputAction> GetEnumerator()
        {
            return asset.GetEnumerator();
        }

        IEnumerator IEnumerable.GetEnumerator()
        {
            return GetEnumerator();
        }

        public void Enable()
        {
            asset.Enable();
        }

        public void Disable()
        {
            asset.Disable();
        }

        public IEnumerable<InputBinding> bindings => asset.bindings;

        public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
        {
            return asset.FindAction(actionNameOrId, throwIfNotFound);
        }

        public int FindBinding(InputBinding bindingMask, out InputAction action)
        {
            return asset.FindBinding(bindingMask, out action);
        }

        // PlayerControlActionMap
        private readonly InputActionMap m_PlayerControlActionMap;
        private List<IPlayerControlActionMapActions> m_PlayerControlActionMapActionsCallbackInterfaces = new List<IPlayerControlActionMapActions>();
        private readonly InputAction m_PlayerControlActionMap_GamepadMovementAction;
        private readonly InputAction m_PlayerControlActionMap_KeyboardMovementAction;
        private readonly InputAction m_PlayerControlActionMap_RunningAction;
        private readonly InputAction m_PlayerControlActionMap_MouseRotationAction;
        private readonly InputAction m_PlayerControlActionMap_GamepadRotationAction;
        public struct PlayerControlActionMapActions
        {
            private @PlayerInputAction m_Wrapper;
            public PlayerControlActionMapActions(@PlayerInputAction wrapper) { m_Wrapper = wrapper; }
            public InputAction @GamepadMovementAction => m_Wrapper.m_PlayerControlActionMap_GamepadMovementAction;
            public InputAction @KeyboardMovementAction => m_Wrapper.m_PlayerControlActionMap_KeyboardMovementAction;
            public InputAction @RunningAction => m_Wrapper.m_PlayerControlActionMap_RunningAction;
            public InputAction @MouseRotationAction => m_Wrapper.m_PlayerControlActionMap_MouseRotationAction;
            public InputAction @GamepadRotationAction => m_Wrapper.m_PlayerControlActionMap_GamepadRotationAction;
            public InputActionMap Get() { return m_Wrapper.m_PlayerControlActionMap; }
            public void Enable() { Get().Enable(); }
            public void Disable() { Get().Disable(); }
            public bool enabled => Get().enabled;
            public static implicit operator InputActionMap(PlayerControlActionMapActions set) { return set.Get(); }
            public void AddCallbacks(IPlayerControlActionMapActions instance)
            {
                if (instance == null || m_Wrapper.m_PlayerControlActionMapActionsCallbackInterfaces.Contains(instance)) return;
                m_Wrapper.m_PlayerControlActionMapActionsCallbackInterfaces.Add(instance);
                @GamepadMovementAction.started += instance.OnGamepadMovementAction;
                @GamepadMovementAction.performed += instance.OnGamepadMovementAction;
                @GamepadMovementAction.canceled += instance.OnGamepadMovementAction;
                @KeyboardMovementAction.started += instance.OnKeyboardMovementAction;
                @KeyboardMovementAction.performed += instance.OnKeyboardMovementAction;
                @KeyboardMovementAction.canceled += instance.OnKeyboardMovementAction;
                @RunningAction.started += instance.OnRunningAction;
                @RunningAction.performed += instance.OnRunningAction;
                @RunningAction.canceled += instance.OnRunningAction;
                @MouseRotationAction.started += instance.OnMouseRotationAction;
                @MouseRotationAction.performed += instance.OnMouseRotationAction;
                @MouseRotationAction.canceled += instance.OnMouseRotationAction;
                @GamepadRotationAction.started += instance.OnGamepadRotationAction;
                @GamepadRotationAction.performed += instance.OnGamepadRotationAction;
                @GamepadRotationAction.canceled += instance.OnGamepadRotationAction;
            }

            private void UnregisterCallbacks(IPlayerControlActionMapActions instance)
            {
                @GamepadMovementAction.started -= instance.OnGamepadMovementAction;
                @GamepadMovementAction.performed -= instance.OnGamepadMovementAction;
                @GamepadMovementAction.canceled -= instance.OnGamepadMovementAction;
                @KeyboardMovementAction.started -= instance.OnKeyboardMovementAction;
                @KeyboardMovementAction.performed -= instance.OnKeyboardMovementAction;
                @KeyboardMovementAction.canceled -= instance.OnKeyboardMovementAction;
                @RunningAction.started -= instance.OnRunningAction;
                @RunningAction.performed -= instance.OnRunningAction;
                @RunningAction.canceled -= instance.OnRunningAction;
                @MouseRotationAction.started -= instance.OnMouseRotationAction;
                @MouseRotationAction.performed -= instance.OnMouseRotationAction;
                @MouseRotationAction.canceled -= instance.OnMouseRotationAction;
                @GamepadRotationAction.started -= instance.OnGamepadRotationAction;
                @GamepadRotationAction.performed -= instance.OnGamepadRotationAction;
                @GamepadRotationAction.canceled -= instance.OnGamepadRotationAction;
            }

            public void RemoveCallbacks(IPlayerControlActionMapActions instance)
            {
                if (m_Wrapper.m_PlayerControlActionMapActionsCallbackInterfaces.Remove(instance))
                    UnregisterCallbacks(instance);
            }

            public void SetCallbacks(IPlayerControlActionMapActions instance)
            {
                foreach (var item in m_Wrapper.m_PlayerControlActionMapActionsCallbackInterfaces)
                    UnregisterCallbacks(item);
                m_Wrapper.m_PlayerControlActionMapActionsCallbackInterfaces.Clear();
                AddCallbacks(instance);
            }
        }
        public PlayerControlActionMapActions @PlayerControlActionMap => new PlayerControlActionMapActions(this);
        public interface IPlayerControlActionMapActions
        {
            void OnGamepadMovementAction(InputAction.CallbackContext context);
            void OnKeyboardMovementAction(InputAction.CallbackContext context);
            void OnRunningAction(InputAction.CallbackContext context);
            void OnMouseRotationAction(InputAction.CallbackContext context);
            void OnGamepadRotationAction(InputAction.CallbackContext context);
        }
    }
}
